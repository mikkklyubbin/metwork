{"cells":[{"cell_type":"code","execution_count":23,"metadata":{"id":"NHde9K6jojbC","executionInfo":{"status":"ok","timestamp":1692959615976,"user_tz":-180,"elapsed":1092,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["import matplotlib\n","import numpy as np\n","import math\n","import pandas as pd\n","import sklearn\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import RandomForestRegressor\n","import pickle\n","\n","import xlrd\n","import matplotlib\n","import numpy as np\n","import math\n","import pandas as pd\n","import sklearn\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import GridSearchCV\n","from openpyxl import load_workbook\n","from sklearn.preprocessing import StandardScaler\n","import torch\n","import torch.nn as nn\n","\n","from torch.autograd import Variable\n","import os\n","import matplotlib.pyplot as plt\n","from torch.nn.functional import one_hot\n","import numpy as np\n","#from tqdm import tqdm_notebook # библиотечка, чтобы красивые прогресбары рисовать (для ноутбука вроде другую немного надо)\n","\n","import tqdm\n","from tqdm.notebook import tqdm as tqdm_notebook\n","from tqdm.notebook import trange\n","from torch.utils.data import TensorDataset, DataLoader\n","from torch.utils.tensorboard import SummaryWriter\n","from datetime import datetime\n","import torchvision\n","\n","from torch.utils.data import Dataset\n","from joblib import dump, load\n","import csv"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"JiJ_sbxuo4qW","executionInfo":{"status":"ok","timestamp":1692959618175,"user_tz":-180,"elapsed":3,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":[]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7287,"status":"ok","timestamp":1692959625460,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"},"user_tz":-180},"id":"18gqhDKGHS4v","outputId":"9d31d823-cff1-4f64-bfa3-47eedd256c12"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","LR = 0.005\n","device = 'cuda'"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"f0_La7Nn2z9K","executionInfo":{"status":"ok","timestamp":1692959625461,"user_tz":-180,"elapsed":6,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["MODEL_NAME = 'drive/MyDrive/metro_network_v1.06'\n","SCALER_PAS = 'drive/MyDrive/cs'\n","BATCH_SIZE = 16\n","os.makedirs(MODEL_NAME, exist_ok=True)\n","os.makedirs(SCALER_PAS, exist_ok=True)\n","\n","start_time_str = datetime.now().strftime('%Y%m%d_%H%M%S')\n","# объект для записи информации на красивую страничку\n","# все данные будут записаны в переданную папку\n","tb_writer = SummaryWriter(f'runs/{MODEL_NAME}_{start_time_str}')"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"SKq6pgQIrCPJ","executionInfo":{"status":"ok","timestamp":1692959627309,"user_tz":-180,"elapsed":1852,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["df = pd.read_csv(\"drive/MyDrive/norm.csv\")\n","df.head()\n","list_of_lr = []\n","to_ind = dict({})\n"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"ezAkxyUww3lB","executionInfo":{"status":"ok","timestamp":1692959627310,"user_tz":-180,"elapsed":3,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["wf = pd.read_csv(\"drive/MyDrive/weather.csv\")\n","wf.head()\n","tm = wf['time']\n","rn = wf['rain']\n","we = dict()\n","for i in range(len(tm)):\n","  a, b = tm[i].split('T')\n","  b = int(b[:2])\n","  y, m, d = map(int, a.split('-'))\n","  we[((y * 12 + m) * 32 + d) * 24 + b] = rn[i]\n","\n"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10678,"status":"ok","timestamp":1692959637985,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"},"user_tz":-180},"id":"uqpt63UuIx67","outputId":"750e9f56-432a-49bf-d7db-8273f552f41a"},"outputs":[{"output_type":"stream","name":"stdout","text":["   Unnamed: 0        date  hour                              st  num_val\n","0           0  2023-01-01     0      АРБАТСК-ПОКРОВСК,Арбатская      373\n","1           1  2023-01-01     0     АРБАТСК-ПОКРОВСК,Бауманская      157\n","2           2  2023-01-01     0  АРБАТСК-ПОКРОВСК,Волоколамская       53\n","3           3  2023-01-01     0   АРБАТСК-ПОКРОВСК,Измайловская       59\n","4           4  2023-01-01     0       АРБАТСК-ПОКРОВСК,Киевская      186\n","1409782\n"]}],"source":["print(df.head())\n","ind = 0\n","print(len(df))\n","f = dict({})\n","g = df['st']\n","pas = df['num_val']\n","ind = 1\n","for i in range(0, len(g)):\n","  if not(g[i] in f):\n","    f[g[i]] = ind;\n","    ind += 1\n","def funic(indexic):\n","  list_date = []\n","  list_hour = []\n","  list_val = []\n","  for i in range(0, len(g)):\n","    if (f[g[i]] == indexic ):\n","      list_date.append(df['date'][i])\n","      list_hour.append(df['hour'][i])\n","      list_val.append(df['num_val'][i])\n","  list_time = []\n","  for i in range(0, len(list_date)):\n","    a, b, c = map(int, list_date[i].split('-'))\n","    list_time.append(((a * 12 + b) * 32 + c) * 24 + list_hour[i])\n","  for_sjat = dict()\n","  for i in range(0, len(list_date)):\n","    if not(list_time[i] in for_sjat):\n","      for_sjat[list_time[i]] = list_val[i]\n","    else:\n","      for_sjat[list_time[i]] += list_val[i]\n","  h = []\n","  week = []\n","  y = []\n","  is_9_may =[]\n","  is_may_hol = []\n","  is_new_year = []\n","  tt = []\n","  weather = []\n","  for k in for_sjat:\n","    h.append(k % 24)\n","    y.append(for_sjat[k])\n","    c = k // 24  % 32\n","    b = k // 24 // 32 % 12\n","    a = k // 24 // 32 // 12\n","    date = datetime(a, b, c)\n","    if (b == 5) and (c == 9):\n","      is_9_may.append(1)\n","    else:\n","      is_9_may.append(0)\n","    if (b == 1) and (c <= 9):\n","      is_new_year.append(1)\n","    else:\n","      is_new_year.append(0)\n","    if (b == 5)and (c <= 9):\n","      is_may_hol.append(1)\n","    else:\n","      is_may_hol.append(0)\n","    tt.append(k / 24)\n","    week.append(date.weekday())\n","    weather.append(we[k])\n","  tt = np.array(tt)\n","  tt = tt.reshape((len(tt), 1))\n","  is_new_year = np.array(is_new_year)\n","  is_9_may = np.array(is_9_may)\n","  is_new_year.reshape((len(is_new_year), 1))\n","  is_9_may.reshape((len(is_9_may), 1))\n","  z = np.array(h)\n","  is_9_may = np.array(is_9_may)\n","  is_9_may = is_9_may.reshape((len(is_9_may), 1))\n","  is_may_hol = np.array(is_may_hol)\n","  is_may_hol = is_may_hol.reshape((len(is_may_hol), 1))\n","  is_new_year = is_new_year.reshape((len(is_new_year), 1))\n","  weather = np.array(weather)\n","  weather = weather.reshape((len(weather), 1))\n","  week = np.array(week)\n","  X = z == 0\n","  X = X.reshape((len(X), 1))\n","  week = week.reshape((len(week), 1))\n","  for j in  range(0, 7):\n","    tmp = (week == j)\n","    tmp = tmp.reshape(len(tmp), 1)\n","    X = np.hstack((X, tmp))\n","  for i in range(1, 24):\n","    tmp = (z == i)\n","    tmp = tmp.reshape(len(tmp), 1)\n","    X = np.hstack((X, tmp))\n","\n","  X = np.hstack((X, is_9_may))\n","  X = np.hstack((X, is_may_hol))\n","  X = np.hstack((X, is_new_year))\n","  X = np.hstack((X, weather))\n","  X = np.hstack((X, tt))\n","  y = np.array(y)\n","  return [X, y]\n"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"eiZ_zAg6XGKl","executionInfo":{"status":"ok","timestamp":1692959637986,"user_tz":-180,"elapsed":7,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["\n","def  train_KNN(X_train , X_test, y_train, y_test):\n","  kn = KNeighborsRegressor()\n","  params = {'n_neighbors': np.arange(10, 60),\n","              'metric': [\n","                  'manhattan', 'euclidean', 'minkowski'],\n","              'weights': ['uniform', 'distance']}\n","  clf_grid = GridSearchCV(kn, params, cv=5, n_jobs=-1)\n","  clf_grid.fit(X_train, y_train)\n","  print(f'KNN parameters chosen: {clf_grid.best_params_}')\n","  kn = KNeighborsRegressor(metric=clf_grid.best_params_['metric'], n_neighbors=clf_grid.best_params_['n_neighbors'],\n","                         weights=clf_grid.best_params_['weights'])\n","  kn.fit(X_train, y_train)\n","  y_pred = kn.predict(X_test)\n","  y_pred = y_test - y_pred\n","  y_pred *= y_pred\n","  print(f'sqrt(MSE) KNN regressor = {(y_pred.sum() / len(y_test)) ** (0.5)}')"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"CP6kGgPCV0oE","executionInfo":{"status":"ok","timestamp":1692959637986,"user_tz":-180,"elapsed":7,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["def train_lr(X_train, y_train, X_test, y_test):\n","  lr = LinearRegression()\n","  lr.fit(X_train, y_train)\n","  y_pred = lr.predict(X_test)\n","  y_pred = y_test - y_pred\n","  y_pred *= y_pred\n","  print(y_test.sum() / len(y_test))\n","  print(f'sqrt(MSE) linear regressor = {(y_pred.sum() / len(y_test)) ** (0.5)}')"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"WfN9xZB6X2iC","executionInfo":{"status":"ok","timestamp":1692959637986,"user_tz":-180,"elapsed":6,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["\n","def train_rfr(X_train, X_test, y_train, y_test):\n","  my_rand_for = RandomForestRegressor()\n","  params = {'max_depth' : np.arange(1, 50, 2), 'n_estimators' : np.arange(1, 50, 2)}\n","  clf_grid = GridSearchCV(my_rand_for, params, cv=5, n_jobs=-1)\n","  clf_grid.fit(X_train, y_train)\n","  print(f'forest parameters chosen: {clf_grid.best_params_}')\n","  my_rand_for = RandomForestRegressor(max_depth=clf_grid.best_params_['max_depth'])\n","  my_rand_for.fit(X_train, y_train)\n","  y_pred = my_rand_for.predict(X_test)\n","  y_pred = y_test - y_pred\n","  y_pred *= y_pred\n","  print(f'sqrt(MSE) RNDF regressor = {(y_pred.sum() / len(y_test)) ** (0.5)}')\n"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"yMvbrshBxv7x","executionInfo":{"status":"ok","timestamp":1692959637986,"user_tz":-180,"elapsed":6,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["class MNISTModel(nn.Module):\n","    def __init__(self):\n","        super(MNISTModel, self).__init__()\n","        self.linear = nn.Linear(36, 300)\n","        self.fun1 = nn.ReLU()\n","        self.linear2 = nn.Linear(300, 300)\n","        self.linear3 = nn.Linear(300, 50)\n","        self.linear4 = nn.Linear(50, 1)\n","\n","    def forward(self, input):\n","      x1 = self.linear(input)\n","      sig = self.fun1(x1)\n","      x2 = self.linear2(sig)\n","      x3 = self.linear3(self.fun1(x2))\n","      x4 = self.linear4(self.fun1(x3))\n","      return self.fun1(x4)"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"qtWl9zXnyEEq","executionInfo":{"status":"ok","timestamp":1692959637987,"user_tz":-180,"elapsed":7,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["def train_one_epoch(model, train_dataloader, optimizer, loss_fn, epoch_num, tb_writer, plot_every):\n","  model.train(True)\n","  current_loss = 0\n","  col = 0;\n","  for ind, (data, labels) in tqdm_notebook(enumerate(train_dataloader), leave=False):\n","    if (len(data) == 16):\n","      col+=1\n","      data = data.squeeze().reshape(len(data.squeeze()), -1).to(device)\n","      data = data.to(device)\n","      labels = labels.to(device)\n","\n","      optimizer.zero_grad()\n","      model.to(device)\n","      model = model.to(device)\n","\n","      yhat = model.forward(data)\n","\n","\n","      loss = loss_fn(yhat.squeeze(), labels)\n","\n","      loss.backward()\n","      optimizer.step()\n","\n","      current_loss += loss.item()\n","      if ind % plot_every == 0:\n","        tb_x = epoch_num * len(train_dataloader) + ind + 1\n","        tb_writer.add_scalar('Loss/train', loss.item(), tb_x)\n","  model.train(False)\n","\n","  return current_loss / (col)"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"2Ag6bKnWyiTN","executionInfo":{"status":"ok","timestamp":1692959637987,"user_tz":-180,"elapsed":7,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["def validation(model, epoch_number, val_dataloader, loss_fn, tb_writer):\n","    val_loss = 0.0\n","\n","    model.eval()\n","    col = 0;\n","    with torch.no_grad():\n","        for vdata in tqdm_notebook(val_dataloader, leave=False):\n","          data, labels = vdata\n","          if (len(data) == 16):\n","            col+= 1\n","            data = data.squeeze().reshape(len(data.squeeze()), -1).to(device)\n","            data = data.to(device)\n","            labels = labels.to(device)\n","            yhat = model.forward(data)\n","            # подсчитываем лосс\n","            loss = loss_fn(yhat.squeeze(), labels)\n","            val_loss += loss.item()\n","\n","    tb_writer.add_scalar('Loss/valid', val_loss / (col), epoch_number)\n","\n","    return val_loss / col"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"U-PKA15UUVdC","executionInfo":{"status":"ok","timestamp":1692959637987,"user_tz":-180,"elapsed":7,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"outputs":[],"source":["def train_neuron(X, y, ind):\n","  X = np.array(X)\n","  y = np.array(y)\n","  const_for_split = 0.15\n","  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=const_for_split)\n","  X_train = np.array(X_train)\n","  y_train = np.array(y_train)\n","  X_test = np.array(X_test)\n","  y_test = np.array(y_test)\n","  X_test = X_test.astype('float')\n","  X_train = X_train.astype('float')\n","  scaler = StandardScaler()\n","  scaler.fit(X_train, y_train)\n","  X_train = scaler.transform(X_train)\n","  X_test = scaler.transform(X_test)\n","  dump(scaler, SCALER_PAS + '/std_scaler' + str(ind)+ 'ubq_q' + '.bin', compress=True)\n","  X_test= torch.Tensor(X_test) # transform to torch tensor\n","  X_train = torch.Tensor(X_train)\n","  y_test= torch.Tensor(y_test) # transform to torch tensor\n","  y_train = torch.Tensor(y_train)\n","  train_data_set = TensorDataset(X_train, y_train)\n","  train_data_loader = DataLoader(train_data_set, batch_size=16, shuffle=True)\n","  test_data_set = TensorDataset(X_test, y_test)\n","  test_data_loader = DataLoader(test_data_set, batch_size=16, shuffle=True)\n","  model = MNISTModel()\n","  epochs = 60\n","  bce_loss = nn.MSELoss()\n","  optimizer = torch.optim.AdamW(model.parameters(), lr = LR)\n","  all_losses = []\n","  epoch_numbers = []\n","  current_loss = 0\n","  plot_every = 50\n","  best_vloss = 1000000000000000000000000000\n","  y = []\n","  x1 = []\n","  x2 = []\n","  model = model.to(device)\n","  good_model = model\n","  for epoch in trange(epochs):\n","    xui = epoch_train_loss = train_one_epoch(\n","      model=model,\n","      train_dataloader=train_data_loader,\n","      optimizer=optimizer,\n","      loss_fn=bce_loss,\n","      epoch_num=epoch,\n","      tb_writer=tb_writer,\n","      plot_every=plot_every)\n","    val_loss = validation(\n","      model=model,\n","      epoch_number=epoch,\n","      val_dataloader=test_data_loader,\n","      loss_fn=bce_loss,\n","      tb_writer=tb_writer)\n","    if (best_vloss > max(xui, val_loss)):\n","      best_vloss = max(xui, val_loss)\n","      good_model = model\n","  print(best_vloss**(0.5) * len(y_test) / y_test.sum())\n","  torch.save(good_model.state_dict(), MODEL_NAME + \"/neuron\" + str(ind) + 'ubq_q')\n","  return best_vloss**(0.5) * len(y_test) / y_test.sum()"]},{"cell_type":"code","source":["def is_val_data(y, m, d):\n","  try:\n","    date = datetime(y, m, d)\n","    return True\n","  except:\n","    return False\n"],"metadata":{"id":"4y9QhdN7SfyE","executionInfo":{"status":"ok","timestamp":1692959637987,"user_tz":-180,"elapsed":7,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["ans = []\n","print(f)\n","st_ind = 0\n","for key in f:\n","  print(key)\n","  f[key]\n","  my_ind = int(f[key])\n","  if not(my_ind in [284, 286, 295, 298, 299, 304]) and(my_ind> st_ind):\n","    pas_scat = \"drive/MyDrive/cs/std_scaler\" + str(my_ind)\n","    neuron_path = \"drive/MyDrive/metro_network_v1.06/metro_network_v1.06/neuron\"\n","    if (my_ind > 50):\n","      pas_scat += \"ubq_q\"\n","    if (my_ind < 150):\n","      if (my_ind > 50):\n","        neuron_path += \"ubq_q\"\n","      neuron_path += str(my_ind)\n","    else:\n","      neuron_path += str(my_ind)\n","      neuron_path += \"ubq_q\"\n","    pas_scat += \".bin\"\n","    sc=load(pas_scat)\n","    model = MNISTModel()\n","    model.load_state_dict(torch.load(neuron_path))\n","    model.eval()\n","    print(my_ind)\n","    tmp = []\n","    for month in range(1, 13):\n","      for day in range(1, 32):\n","        for h in range(0, 24):\n","          for wea in range(0, 11, 10):\n","            if (is_val_data(2023, month, day)):\n","              date = datetime(2023, month, day)\n","              sap = [day == 0]\n","              week = date.weekday()\n","              for i in range(7):\n","                sap.append(week == i)\n","              for j in range(1, 24):\n","                sap.append(h == j)\n","              if (month == 5) and (day == 9):\n","                sap.append(1)\n","              else:\n","                sap.append(0)\n","              if (month == 5)and (day <= 9):\n","                sap.append(1)\n","              else:\n","                sap.append(0)\n","              if (month == 1) and (day <= 9):\n","                sap.append(1)\n","              else:\n","                sap.append(0)\n","              sap.append(wea)\n","              sap.append(((2023 * 12 + month) * 32 + day))\n","              sap = np.array(sap)\n","              sap = sap.astype('float')\n","              sap = sap.reshape((1, 36))\n","              sap = sc.transform(sap)\n","              sap= torch.Tensor(sap)\n","              res= model.forward(sap)\n","              s_m = str(month)\n","              if (len(s_m) < 2):\n","                s_m = \"0\" + s_m\n","              s_d = str(day)\n","              if (len(s_d) < 2):\n","                s_d = \"0\" + s_d\n","              s_h = str(h)\n","              if (len(s_h) < 2):\n","                s_h = \"0\" + s_h\n","              gs = str(wea == 10)\n","              tmp.append([key + \"|2023.\" +s_m + \".\" + s_d + \"|\" + s_h + \"|\" + gs, str(res)])\n","  with open('drive/MyDrive/products' + str(my_ind) + '.csv', 'w', newline='') as file:\n","    writer = csv.writer(file)\n","    for el in tmp:\n","      writer.writerow(el)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":431},"id":"HAGLDqwZFNmX","executionInfo":{"status":"error","timestamp":1692960429234,"user_tz":-180,"elapsed":48170,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}},"outputId":"1172c194-32e1-4cc3-b535-0c8320bef01b"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["{'АРБАТСК-ПОКРОВСК,Арбатская': 1, 'АРБАТСК-ПОКРОВСК,Бауманская': 2, 'АРБАТСК-ПОКРОВСК,Волоколамская': 3, 'АРБАТСК-ПОКРОВСК,Измайловская': 4, 'АРБАТСК-ПОКРОВСК,Киевская': 5, 'АРБАТСК-ПОКРОВСК,Крылатское': 6, 'АРБАТСК-ПОКРОВСК,Кунцевская': 7, 'АРБАТСК-ПОКРОВСК,Курская': 8, 'АРБАТСК-ПОКРОВСК,Митино': 9, 'АРБАТСК-ПОКРОВСК,Молодёжная': 10, 'АРБАТСК-ПОКРОВСК,Мякинино': 11, 'АРБАТСК-ПОКРОВСК,Парк Победы': 12, 'АРБАТСК-ПОКРОВСК,Партизанская': 13, 'АРБАТСК-ПОКРОВСК,Первомайская': 14, 'АРБАТСК-ПОКРОВСК,Площадь Революции': 15, 'АРБАТСК-ПОКРОВСК,Пятницкое шоссе': 16, 'АРБАТСК-ПОКРОВСК,Семёновская': 17, 'АРБАТСК-ПОКРОВСК,Славянский бульв': 18, 'АРБАТСК-ПОКРОВСК,Смоленская': 19, 'АРБАТСК-ПОКРОВСК,Строгино': 20, 'АРБАТСК-ПОКРОВСК,Щёлковская': 21, 'АРБАТСК-ПОКРОВСК,Электрозаводская': 22, 'БКЛ,Авиамоторная БКЛ': 23, 'БКЛ,Аминьевская': 24, 'БКЛ,Воронцовская': 25, 'БКЛ,Давыдково': 26, 'БКЛ,Дел. центр БКЛ': 27, 'БКЛ,Зюзино': 28, 'БКЛ,Каховская': 29, 'БКЛ,Кунцевская БКЛ': 30, 'БКЛ,Лефортово БКЛ': 31, 'БКЛ,Мичурин.пр-т БКЛ': 32, 'БКЛ,Мнёвники': 33, 'БКЛ,Народное Ополч-е': 34, 'БКЛ,Новаторская': 35, 'БКЛ,Петровский парк': 36, 'БКЛ,Пр-т Вернад. БКЛ': 37, 'БКЛ,Савёловская БКЛ': 38, 'БКЛ,Терехово': 39, 'БКЛ,Хорошёвская': 40, 'БКЛ,ЦСКА': 41, 'БКЛ,Шелепиха': 42, 'БКЛ,Электрозав-я БКЛ': 43, 'БУТОВСКАЯ ЛИНИЯ,Б-р Адм. Ушакова': 44, 'БУТОВСКАЯ ЛИНИЯ,Битцевский парк': 45, 'БУТОВСКАЯ ЛИНИЯ,Бунинская аллея': 46, 'БУТОВСКАЯ ЛИНИЯ,Лесопарковая': 47, 'БУТОВСКАЯ ЛИНИЯ,Ул. Горчакова': 48, 'БУТОВСКАЯ ЛИНИЯ,Ул. Скобелевская': 49, 'ЗАМОСКВОРЕЦКАЯ,Автозаводская': 50, 'ЗАМОСКВОРЕЦКАЯ,Алма-Атинская': 51, 'ЗАМОСКВОРЕЦКАЯ,Аэропорт': 52, 'ЗАМОСКВОРЕЦКАЯ,Беломорская': 53, 'ЗАМОСКВОРЕЦКАЯ,Белорусская': 54, 'ЗАМОСКВОРЕЦКАЯ,Водный Стадион': 55, 'ЗАМОСКВОРЕЦКАЯ,Войковская': 56, 'ЗАМОСКВОРЕЦКАЯ,Динамо': 57, 'ЗАМОСКВОРЕЦКАЯ,Домодедовская': 58, 'ЗАМОСКВОРЕЦКАЯ,Красногвардейск.': 59, 'ЗАМОСКВОРЕЦКАЯ,Маяковская': 60, 'ЗАМОСКВОРЕЦКАЯ,Новокузнецкая': 61, 'ЗАМОСКВОРЕЦКАЯ,Орехово': 62, 'ЗАМОСКВОРЕЦКАЯ,Павелецкая': 63, 'ЗАМОСКВОРЕЦКАЯ,Речной вокзал': 64, 'ЗАМОСКВОРЕЦКАЯ,Сокол': 65, 'ЗАМОСКВОРЕЦКАЯ,Ховрино': 66, 'КАЛИНИНСКАЯ,Авиамоторная': 67, 'КАЛИНИНСКАЯ,Марксистская': 68, 'КАЛИНИНСКАЯ,Новогиреево': 69, 'КАЛИНИНСКАЯ,Новокосино': 70, 'КАЛИНИНСКАЯ,Перово': 71, 'КАЛИНИНСКАЯ,Площадь Ильича': 72, 'КАЛИНИНСКАЯ,Третьяковская': 73, 'КАЛИНИНСКАЯ,Ш. Энтузиастов': 74, 'КАЛУЖСКО-РИЖСКАЯ,Академическая': 75, 'КАЛУЖСКО-РИЖСКАЯ,Алексеевская': 76, 'КАЛУЖСКО-РИЖСКАЯ,Бабушкинская': 77, 'КАЛУЖСКО-РИЖСКАЯ,Беляево': 78, 'КАЛУЖСКО-РИЖСКАЯ,Ботанический сад': 79, 'КАЛУЖСКО-РИЖСКАЯ,ВДНХ': 80, 'КАЛУЖСКО-РИЖСКАЯ,Калужская': 81, 'КАЛУЖСКО-РИЖСКАЯ,Китай-город': 82, 'КАЛУЖСКО-РИЖСКАЯ,Коньково': 83, 'КАЛУЖСКО-РИЖСКАЯ,Ленинский пр-т': 84, 'КАЛУЖСКО-РИЖСКАЯ,Медведково': 85, 'КАЛУЖСКО-РИЖСКАЯ,Новоясеневская': 86, 'КАЛУЖСКО-РИЖСКАЯ,Новые Черёмушки': 87, 'КАЛУЖСКО-РИЖСКАЯ,Октябрьская КРЛ': 88, 'КАЛУЖСКО-РИЖСКАЯ,Проспект Мира': 89, 'КАЛУЖСКО-РИЖСКАЯ,Профсоюзная': 90, 'КАЛУЖСКО-РИЖСКАЯ,Рижская': 91, 'КАЛУЖСКО-РИЖСКАЯ,Свиблово': 92, 'КАЛУЖСКО-РИЖСКАЯ,Сухаревская': 93, 'КАЛУЖСКО-РИЖСКАЯ,Тургеневская': 94, 'КАЛУЖСКО-РИЖСКАЯ,Тёплый стан': 95, 'КАЛУЖСКО-РИЖСКАЯ,Шаболовская': 96, 'КАЛУЖСКО-РИЖСКАЯ,Ясенево': 97, 'КОЛЬЦЕВАЯ,Белорусская': 98, 'КОЛЬЦЕВАЯ,Добрынинская': 99, 'КОЛЬЦЕВАЯ,Киевская': 100, 'КОЛЬЦЕВАЯ,Комсомольская': 101, 'КОЛЬЦЕВАЯ,Краснопресненск.': 102, 'КОЛЬЦЕВАЯ,Курская': 103, 'КОЛЬЦЕВАЯ,Новослободская': 104, 'КОЛЬЦЕВАЯ,Октябрьская': 105, 'КОЛЬЦЕВАЯ,Павелецкая': 106, 'КОЛЬЦЕВАЯ,Парк культуры': 107, 'КОЛЬЦЕВАЯ,Проспект Мира': 108, 'КОЛЬЦЕВАЯ,Таганская': 109, 'ЛЮБЛИНСКАЯ,Борисово': 110, 'ЛЮБЛИНСКАЯ,Братиславская': 111, 'ЛЮБЛИНСКАЯ,Бутырская': 112, 'ЛЮБЛИНСКАЯ,Верхние Лихоборы': 113, 'ЛЮБЛИНСКАЯ,Волжская': 114, 'ЛЮБЛИНСКАЯ,Достоевская': 115, 'ЛЮБЛИНСКАЯ,Дубровка': 116, 'ЛЮБЛИНСКАЯ,Зябликово': 117, 'ЛЮБЛИНСКАЯ,Кожуховская': 118, 'ЛЮБЛИНСКАЯ,Крест. застава': 119, 'ЛЮБЛИНСКАЯ,Люблино': 120, 'ЛЮБЛИНСКАЯ,Марьина Роща': 121, 'ЛЮБЛИНСКАЯ,Марьино': 122, 'ЛЮБЛИНСКАЯ,Окружная': 123, 'ЛЮБЛИНСКАЯ,Петровско-Разум.': 124, 'ЛЮБЛИНСКАЯ,Печатники': 125, 'ЛЮБЛИНСКАЯ,Римская': 126, 'ЛЮБЛИНСКАЯ,Селигерская': 127, 'ЛЮБЛИНСКАЯ,Сретенский б-р': 128, 'ЛЮБЛИНСКАЯ,Трубная': 129, 'ЛЮБЛИНСКАЯ,Фонвизинская': 130, 'ЛЮБЛИНСКАЯ,Чкаловская': 131, 'ЛЮБЛИНСКАЯ,Шипиловская': 132, 'МИНИМЕТРО,Выставочная': 133, 'МИНИМЕТРО,Международная': 134, 'МЦК,Автозавод. МЦК': 135, 'МЦК,Андроновка МЦК': 136, 'МЦК,Б-р Рокоссов.МЦК': 137, 'МЦК,Балтийская МЦК': 138, 'МЦК,Белокаменная МЦК': 139, 'МЦК,Ботан. сад МЦК': 140, 'МЦК,Верхн. Котлы МЦК': 141, 'МЦК,Владыкино МЦК': 142, 'МЦК,Дел. центр МЦК': 143, 'МЦК,Дубровка МЦК': 144, 'МЦК,ЗИЛ МЦК': 145, 'МЦК,Зорге МЦК': 146, 'МЦК,Измайлово МЦК': 147, 'МЦК,Коптево МЦК': 148, 'МЦК,Крымская МЦК': 149, 'МЦК,Кутузовская МЦК': 150, 'МЦК,Лихоборы МЦК': 151, 'МЦК,Локомотив МЦК': 152, 'МЦК,Лужники МЦК': 153, 'МЦК,Нижегородск. МЦК': 154, 'МЦК,Новохохлов-я МЦК': 155, 'МЦК,Окружная МЦК': 156, 'МЦК,Панфиловская МЦК': 157, 'МЦК,Пл. Гагарина МЦК': 158, 'МЦК,Ростокино МЦК': 159, 'МЦК,Сокол. гора МЦК': 160, 'МЦК,Стрешнево МЦК': 161, 'МЦК,Угрешская МЦК': 162, 'МЦК,Хорошёво МЦК': 163, 'МЦК,Шелепиха МЦК': 164, 'МЦК,Шоссе энтуз.МЦК': 165, 'НЕКРАСОВСКАЯ,Косино': 166, 'НЕКРАСОВСКАЯ,Лухмановская': 167, 'НЕКРАСОВСКАЯ,Некрасовка': 168, 'НЕКРАСОВСКАЯ,Нижегородская': 169, 'НЕКРАСОВСКАЯ,Окская': 170, 'НЕКРАСОВСКАЯ,Стахановская': 171, 'НЕКРАСОВСКАЯ,Ул.Дмитриевского': 172, 'НЕКРАСОВСКАЯ,Юго-Восточная': 173, 'СЕРПУХОВ-ТИМИРЯЗ,Алтуфьево': 174, 'СЕРПУХОВ-ТИМИРЯЗ,Аннино': 175, 'СЕРПУХОВ-ТИМИРЯЗ,Б-р Дм. Донского': 176, 'СЕРПУХОВ-ТИМИРЯЗ,Бибирево': 177, 'СЕРПУХОВ-ТИМИРЯЗ,Боровицкая': 178, 'СЕРПУХОВ-ТИМИРЯЗ,Владыкино': 179, 'СЕРПУХОВ-ТИМИРЯЗ,Дмитровская': 180, 'СЕРПУХОВ-ТИМИРЯЗ,Менделеевская': 181, 'СЕРПУХОВ-ТИМИРЯЗ,Нагатинская': 182, 'СЕРПУХОВ-ТИМИРЯЗ,Нагорная': 183, 'СЕРПУХОВ-ТИМИРЯЗ,Нахимовский пр-т': 184, 'СЕРПУХОВ-ТИМИРЯЗ,Отрадное': 185, 'СЕРПУХОВ-ТИМИРЯЗ,Полянка': 186, 'СЕРПУХОВ-ТИМИРЯЗ,Пражская': 187, 'СЕРПУХОВ-ТИМИРЯЗ,Савёловская СТЛ': 188, 'СЕРПУХОВ-ТИМИРЯЗ,Севастопольская': 189, 'СЕРПУХОВ-ТИМИРЯЗ,Серпуховская': 190, 'СЕРПУХОВ-ТИМИРЯЗ,Тимирязевская': 191, 'СЕРПУХОВ-ТИМИРЯЗ,Тульская': 192, 'СЕРПУХОВ-ТИМИРЯЗ,Ул. Ак. Янгеля': 193, 'СЕРПУХОВ-ТИМИРЯЗ,Цветной Бульвар': 194, 'СЕРПУХОВ-ТИМИРЯЗ,Чертановская': 195, 'СЕРПУХОВ-ТИМИРЯЗ,Чеховская': 196, 'СЕРПУХОВ-ТИМИРЯЗ,Южная': 197, 'СОКОЛЬНИЧЕСКАЯ,Б.Рокоссовского': 198, 'СОКОЛЬНИЧЕСКАЯ,Воробьёвы горы': 199, 'СОКОЛЬНИЧЕСКАЯ,Коммунарка': 200, 'СОКОЛЬНИЧЕСКАЯ,Комсомольск. СЛ': 201, 'СОКОЛЬНИЧЕСКАЯ,Красносельская': 202, 'СОКОЛЬНИЧЕСКАЯ,Красные ворота': 203, 'СОКОЛЬНИЧЕСКАЯ,Кропоткинская': 204, 'СОКОЛЬНИЧЕСКАЯ,Лубянка': 205, 'СОКОЛЬНИЧЕСКАЯ,Ольховая': 206, 'СОКОЛЬНИЧЕСКАЯ,Охотный ряд': 207, 'СОКОЛЬНИЧЕСКАЯ,Преображенск. пл': 208, 'СОКОЛЬНИЧЕСКАЯ,Прокшино': 209, 'СОКОЛЬНИЧЕСКАЯ,Проспект Вернадского': 210, 'СОКОЛЬНИЧЕСКАЯ,Румянцево': 211, 'СОКОЛЬНИЧЕСКАЯ,Саларьево': 212, 'СОКОЛЬНИЧЕСКАЯ,Сокольники': 213, 'СОКОЛЬНИЧЕСКАЯ,Спортивная': 214, 'СОКОЛЬНИЧЕСКАЯ,Тропарёво': 215, 'СОКОЛЬНИЧЕСКАЯ,Университет': 216, 'СОКОЛЬНИЧЕСКАЯ,Филатов луг': 217, 'СОКОЛЬНИЧЕСКАЯ,Фрунзенская': 218, 'СОКОЛЬНИЧЕСКАЯ,Черкизовская': 219, 'СОКОЛЬНИЧЕСКАЯ,Чистые пруды': 220, 'СОКОЛЬНИЧЕСКАЯ,Юго-западная': 221, 'СОЛНЦЕВСКАЯ ЛИН.,Боровское шоссе': 222, 'СОЛНЦЕВСКАЯ ЛИН.,Говорово': 223, 'СОЛНЦЕВСКАЯ ЛИН.,Деловой центр': 224, 'СОЛНЦЕВСКАЯ ЛИН.,Ломоносовск.пр-т': 225, 'СОЛНЦЕВСКАЯ ЛИН.,Минская': 226, 'СОЛНЦЕВСКАЯ ЛИН.,Мичуринский проспект': 227, 'СОЛНЦЕВСКАЯ ЛИН.,Новопеределкино': 228, 'СОЛНЦЕВСКАЯ ЛИН.,Озёрная': 229, 'СОЛНЦЕВСКАЯ ЛИН.,Парк Победы': 230, 'СОЛНЦЕВСКАЯ ЛИН.,Раменки': 231, 'СОЛНЦЕВСКАЯ ЛИН.,Рассказовка': 232, 'СОЛНЦЕВСКАЯ ЛИН.,Солнцево': 233, 'ТАГАНСК-КРАСНОПР,Баррикадная': 234, 'ТАГАНСК-КРАСНОПР,Беговая': 235, 'ТАГАНСК-КРАСНОПР,Волгоградский пр': 236, 'ТАГАНСК-КРАСНОПР,Выхино': 237, 'ТАГАНСК-КРАСНОПР,Жулебино': 238, 'ТАГАНСК-КРАСНОПР,Котельники': 239, 'ТАГАНСК-КРАСНОПР,Кузнецкий мост': 240, 'ТАГАНСК-КРАСНОПР,Кузьминки': 241, 'ТАГАНСК-КРАСНОПР,Лермонтовский пр': 242, 'ТАГАНСК-КРАСНОПР,Октябрьское поле': 243, 'ТАГАНСК-КРАСНОПР,Планерная': 244, 'ТАГАНСК-КРАСНОПР,Полежаевская': 245, 'ТАГАНСК-КРАСНОПР,Пролетарская': 246, 'ТАГАНСК-КРАСНОПР,Пушкинская': 247, 'ТАГАНСК-КРАСНОПР,Рязанский пр-т': 248, 'ТАГАНСК-КРАСНОПР,Спартак': 249, 'ТАГАНСК-КРАСНОПР,Сходненская': 250, 'ТАГАНСК-КРАСНОПР,Таганская': 251, 'ТАГАНСК-КРАСНОПР,Текстильщики': 252, 'ТАГАНСК-КРАСНОПР,Тушинская': 253, 'ТАГАНСК-КРАСНОПР,Улица 1905 года': 254, 'ТАГАНСК-КРАСНОПР,Щукинская': 255, 'ФИЛЁВСКАЯ,Александр. сад': 256, 'ФИЛЁВСКАЯ,Арбатская': 257, 'ФИЛЁВСКАЯ,Багратионовская': 258, 'ФИЛЁВСКАЯ,Кунцевская': 259, 'ФИЛЁВСКАЯ,Кутузовская': 260, 'ФИЛЁВСКАЯ,Пионерская': 261, 'ФИЛЁВСКАЯ,Смоленская': 262, 'ФИЛЁВСКАЯ,Студенческая': 263, 'ФИЛЁВСКАЯ,Фили': 264, 'ФИЛЁВСКАЯ,Филёвский парк': 265, 'ММТС,ВВЦ': 266, 'ММТС,Ул. Милашенкова': 267, 'ММТС,Ул. Эйзенштейна': 268, 'ММТС,Телецентр': 269, 'ММТС,Тимирязевская МР': 270, 'ММТС,Ул. Ак. Королёва': 271, 'центры стендовые,Стенд ДПС': 272, 'центры стендовые,Стенд.станция СД': 273, 'РТ-1,Киевский': 274, 'центры стендовые,Стенд МЦК': 275, 'БКЛ,Марьина Роща БКЛ': 276, 'ЗАМОСКВОРЕЦКАЯ,Коломенская': 277, 'БКЛ,Текстильщики БКЛ': 278, 'БКЛ,Кленовый бульвар': 279, 'БКЛ,Нагатинский З-н': 280, 'БКЛ,Рижская БКЛ': 281, 'БКЛ,Печатники БКЛ': 282, 'БКЛ,Сокольники БКЛ': 283, 'центры стендовые,Технический': 284, 'БКЛ,Варшавская': 285, 'ЗАМОСКВОРЕЦКАЯ,Каширская': 286, 'БКЛ,Каширская': 287, 'КАЛУЖСКО-РИЖСКАЯ,Октябрьская Р': 288, 'СЕРПУХОВ-ТИМИРЯЗ,Савёловская': 289, 'СОКОЛЬНИЧЕСКАЯ,Комсомольск(Сок)': 290, 'БКЛ,Нагатинский з-н': 291, 'центры стендовые,Стенд КБР ЦОТТ': 292, 'ЗАМОСКВОРЕЦКАЯ,Технопарк': 293, 'РТ-1,Сити-Центральный': 294, 'центры стендовые,ЛКК': 295, 'ЗАМОСКВОРЕЦКАЯ,Царицыно': 296, 'ЗАМОСКВОРЕЦКАЯ,Кантемировская': 297, 'центры стендовые,Стенд КБР ММТС': 298, 'центры стендовые,Стенд Л РТ': 299, 'РТ-1,Сити-Багратион': 300, 'РТ-1,Кутузовский': 301, 'РТ-1,Сердце столицы': 302, 'РТ-1,Трёхгорный': 303, 'РТ-2,Южный речной в-л': 304}\n","АРБАТСК-ПОКРОВСК,Арбатская\n","1\n","АРБАТСК-ПОКРОВСК,Бауманская\n","2\n","АРБАТСК-ПОКРОВСК,Волоколамская\n","3\n","АРБАТСК-ПОКРОВСК,Измайловская\n","4\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-008e6102b914>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     53\u001b[0m               \u001b[0msap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msap\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m               \u001b[0msap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'float'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m               \u001b[0msap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m36\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m               \u001b[0msap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msap\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m               \u001b[0msap\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msap\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["\n","with open('drive/MyDrive/real_product.csv', 'w', newline='') as file:\n","    # Шаг 4: используем метод csv.writer, чтобы сохранить список в файл формата CSV\n","    writer = csv.writer(file)\n","    for j in range(1,5):\n","      with open(\"drive/MyDrive/products\" + str(j) + \".csv\", 'r', newline='') as csvfile:\n","       spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')\n","       for row in spamreader:\n","           writer.writerow(row)"],"metadata":{"id":"UwTvGjHpQm3y","executionInfo":{"status":"ok","timestamp":1692960444273,"user_tz":-180,"elapsed":636,"user":{"displayName":"Aboba Aboba","userId":"07378258419207705723"}}},"execution_count":42,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}